{"version":3,"sources":["components/ListItem.js","components/List.js","components/BackgroundItem.js","components/Desktop.js","serviceWorker.js","index.js"],"names":["ListItem","state","editing","checked","toggleCheck","_this","setState","edit","remove","props","onRemove","item","save","e","preventDefault","onChange","_newText","value","cancel","renderForm","react_default","a","createElement","id","className","ref","input","defaultValue","children","onClick","fa","renderDisplay","status","style","textDecoration","this","Component","List","tasks","userInput","handleUserInput","refs","alertMessage","setAttribute","taskInput","target","add","prevState","concat","Object","toConsumableArray","nextId","task","popupAlert","uniqueId","update","newText","i","map","objectSpread","filter","popup","data","require","_this2","display","onSubmit","type","placeholder","components_ListItem","key","BackgroundItem","Desktop","components_List","components_BackgroundItem","Boolean","window","location","hostname","match","ReactDOM","render","components_Desktop","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6eA8EeA,6MAzEXC,MAAQ,CACJC,SAAS,EACTC,SAAS,KAGbC,YAAc,WACVC,EAAKC,SAAS,CACVH,SAAUE,EAAKJ,MAAME,aAI7BI,KAAO,WACHF,EAAKC,SAAS,CACVJ,SAAS,OAIjBM,OAAS,WACLH,EAAKI,MAAMC,SAASL,EAAKI,MAAME,SAGnCC,KAAO,SAACC,GACJA,EAAEC,iBACFT,EAAKI,MAAMM,SAASV,EAAKW,SAASC,MAAOZ,EAAKI,MAAME,MACpDN,EAAKC,SAAS,CACVJ,SAAS,OAIjBgB,OAAS,SAACL,GACNA,EAAEC,iBACFT,EAAKC,SAAS,CACVJ,SAAS,OAIjBiB,WAAa,WACT,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAIlB,EAAKI,MAAME,KAAMa,UAAU,YAChCJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,aACZJ,EAAAC,EAAAC,cAAA,YAAUG,IAAK,SAAAC,GAAK,OAAIrB,EAAKW,SAAWU,GAC9BC,aAAetB,EAAKI,MAAMmB,WACpCR,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,OAAOK,QAAUxB,EAAKO,MAAOQ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,OAC/CV,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASK,QAAUxB,EAAKa,QAASE,EAAAC,EAAAC,cAACQ,EAAA,EAAD,aAOvEC,cAAgB,WACZ,IAAIC,EAGJ,OAFqBA,EAArB3B,EAAKJ,MAAME,QAAmBiB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,MAA6BV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,MAGvDV,EAAAC,EAAAC,cAAA,OAAKC,GAAIlB,EAAKI,MAAME,KAAMa,UAAU,YACjCJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,oBAAoBK,QAAUxB,EAAKD,aAC9C4B,EADP,IACgBZ,EAAAC,EAAAC,cAAA,QAAMW,MAAO,CAACC,eAAgB7B,EAAKJ,MAAME,QAAU,eAAiB,SAASiB,EAAAC,EAAAC,cAAA,QAAME,UAAU,eAAgBnB,EAAKI,MAAMmB,YAExIR,EAAAC,EAAAC,cAAA,QAAME,UAAU,cACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,OAAOK,QAAUxB,EAAKE,MAAOa,EAAAC,EAAAC,cAACQ,EAAA,EAAD,OAC/CV,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASK,QAAUxB,EAAKG,QAASY,EAAAC,EAAAC,cAACQ,EAAA,EAAD,kFAO/D,OAAOK,KAAKlC,MAAMC,QAAUiC,KAAKhB,aAAegB,KAAKJ,uBAtEtCK,aC0GRC,oNAxGXpC,MAAQ,CACJqC,MAAO,GACPC,UAAW,MAUfC,gBAAkB,SAAA3B,GACdR,EAAKoC,KAAKC,aAAaC,aAAa,QAAS,iBAC7CtC,EAAKoC,KAAKG,UAAUD,aAAa,QAAS,+BAC1CtC,EAAKC,SAAS,CACViC,UAAW1B,EAAEgC,OAAO5B,WAI5B6B,IAAM,SAACjC,GACHA,EAAEC,iBACET,EAAKJ,MAAMsC,WACXlC,EAAKC,SAAS,SAAAyC,GAAS,MAAK,CACxBT,MAAK,GAAAU,OAAAC,OAAAC,EAAA,EAAAD,CACEF,EAAUT,OADZ,CAED,CACIf,GAAIlB,EAAK8C,SACTC,KAAM/C,EAAKJ,MAAMsC,aAGzBA,UAAW,MAEflC,EAAKoC,KAAKC,aAAaC,aAAa,QAAS,iBAC7CtC,EAAKoC,KAAKG,UAAUD,aAAa,QAAS,iCAE1CtC,EAAKoC,KAAKY,WAAWV,aAAa,QAAS,mBAC3CtC,EAAKoC,KAAKC,aAAaC,aAAa,QAAS,mBAC7CtC,EAAKoC,KAAKG,UAAUD,aAAa,QAAS,6BAIlDQ,OAAS,WAEL,OADA9C,EAAKiD,SAAWjD,EAAKiD,UAAY,EAC1BjD,EAAKiD,cAGhBC,OAAS,SAACC,EAASC,GACfpD,EAAKC,SAAS,SAAAyC,GAAS,MAAK,CACxBT,MAAOS,EAAUT,MAAMoB,IACnB,SAAAN,GAAI,OAAKA,EAAK7B,KAAOkC,EAAKL,EAAlBH,OAAAU,EAAA,EAAAV,CAAA,GAA6BG,EAA7B,CAAmCA,KAAMI,YAK7DhD,OAAS,SAACe,GACNlB,EAAKC,SAAS,SAAAyC,GAAS,MAAK,CACxBT,MAAOS,EAAUT,MAAMsB,OAAO,SAAAR,GAAI,OAAIA,EAAK7B,KAAOA,UAI1DsC,MAAQ,WACJxD,EAAKoC,KAAKY,WAAWV,aAAa,QAAQ,qGAxD1C,IAAImB,EAAOC,EAAQ,IACnB5B,KAAK7B,SAAS,CACZgC,MAAOwB,qCAyDJ,IAAAE,EAAA7B,KACL,OACIf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAf,cACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBS,MAAO,CAACgC,QAAS,QAASxC,IAAI,gBACzDL,EAAAC,EAAAC,cAACQ,EAAA,EAAD,MADJ,iBAGAV,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAAW0C,SAAW/B,KAAKW,KACvC1B,EAAAC,EAAAC,cAAA,SAAO6C,KAAK,OACJC,YAAY,mBACZrD,SAAWoB,KAAKK,gBAChBvB,MAAQkB,KAAKlC,MAAMsC,UACnBd,IAAI,cACZL,EAAAC,EAAAC,cAAA,UAAQE,UAAU,MAAMK,QAAUM,KAAKW,KAAM1B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,SAGrDV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACTW,KAAKlC,MAAMqC,MAAMoB,IAAI,SAAAN,GACnB,OACIhC,EAAAC,EAAAC,cAAC+C,EAAD,CAAUC,IAAMlB,EAAK7B,GACTZ,KAAOyC,EAAK7B,GACZR,SAAWiD,EAAKT,OAChB7C,SAAWsD,EAAKxD,QACtB4C,EAAKA,SAKvBhC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAcS,MAAO,CAACgC,QAAS,QAASxC,IAAI,cACvDL,EAAAC,EAAAC,cAACQ,EAAA,EAAD,MACAV,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,YAAYK,QAAUM,KAAK0B,OAA7C,eAlGDzB,cCkBJmC,SAnBQ,kBACrBnD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAEjBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBAAiBJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,QAElCV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBCLVgD,EAPC,kBACdpD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACoD,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c453baa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../stylesheets/ListItem.css';\nimport { FaRegCircle, FaCheckCircle, FaSave, FaTimes, FaPen, FaTrash } from 'react-icons/fa';\n\nclass ListItem extends Component {\n    state = {\n        editing: false,\n        checked: false\n    }\n\n    toggleCheck = () =>  {\n        this.setState({\n            checked: !this.state.checked\n        })\n    }\n\n    edit = () => {\n        this.setState({\n            editing: true\n        })\n    }\n\n    remove = () => {\n        this.props.onRemove(this.props.item)\n    }\n\n    save = (e) => {\n        e.preventDefault();\n        this.props.onChange(this._newText.value, this.props.item);\n        this.setState({\n            editing: false\n        })\n    }\n\n    cancel = (e) => {\n        e.preventDefault();\n        this.setState({\n            editing: false\n        })\n    }\n\n    renderForm = () => {\n        return (\n            <div id={this.props.item} className=\"ListItem\">\n                <form className=\"edit-form\">\n                    <textarea ref={input => this._newText = input}\n                              defaultValue={ this.props.children }/>\n                    <span>\n                        <button className=\"save\" onClick={ this.save }><FaSave /></button>\n                        <button className=\"cancel\" onClick={ this.cancel }><FaTimes /></button>\n                    </span>\n                </form>\n            </div>\n        )\n    }\n\n    renderDisplay = () => {\n        let status;\n        this.state.checked ? status = <FaCheckCircle /> : status = <FaRegCircle />;\n\n        return (\n            <div id={this.props.item} className=\"ListItem\">\n               <button className=\"status status-btn\" onClick={ this.toggleCheck }>\n                    { status } <span style={{textDecoration: this.state.checked ? \"line-through\" : \"none\"}}><span className=\"status-font\">{ this.props.children }</span></span>\n                </button>\n               <span className=\"button-div\">\n                    <button className=\"edit\" onClick={ this.edit }><FaPen /></button>\n                    <button className=\"remove\" onClick={ this.remove }><FaTrash /></button>\n                </span>\n            </div>\n        )\n    }\n\n    render() {\n        return this.state.editing ? this.renderForm() : this.renderDisplay();\n    }\n}\n\nexport default ListItem;","import React, { Component } from 'react';\nimport ListItem from './ListItem';\nimport '../stylesheets/List.css';\nimport { FaExclamationCircle, FaPlus } from 'react-icons/fa';\n\nclass List extends Component {\n    state = {\n        tasks: [],\n        userInput: ''\n    }\n\n    componentDidMount() {\n        var data = require('../../src/data.json');\n        this.setState({ \n          tasks: data\n        })\n    }\n\n    handleUserInput = e => {\n        this.refs.alertMessage.setAttribute('style', 'display: none');\n        this.refs.taskInput.setAttribute('style', 'border: 1px solid slategray');\n        this.setState({\n            userInput: e.target.value\n        })\n    }\n    \n    add = (e) => {\n        e.preventDefault();\n        if (this.state.userInput) {\n            this.setState(prevState => ({\n                tasks: [\n                    ...prevState.tasks,\n                    {\n                        id: this.nextId(),\n                        task: this.state.userInput\n                    }\n                ],\n                userInput: ''\n            }))\n            this.refs.alertMessage.setAttribute('style', 'display: none');\n            this.refs.taskInput.setAttribute('style', 'border: 1px solid slategray');\n        } else {\n            this.refs.popupAlert.setAttribute('style', 'display: inline');\n            this.refs.alertMessage.setAttribute('style', 'display: inline');\n            this.refs.taskInput.setAttribute('style', 'border: 1px solid red');\n        }\n    }\n\n    nextId = () => {\n        this.uniqueId = this.uniqueId || 4\n        return this.uniqueId++\n    }\n\n    update = (newText, i) => {\n        this.setState(prevState => ({\n            tasks: prevState.tasks.map(\n                task => (task.id !== i) ? task : {...task, task: newText}\n            )\n        }))\n    }\n\n    remove = (id) => {\n        this.setState(prevState => ({\n            tasks: prevState.tasks.filter(task => task.id !== id)\n        }))\n    }\n\n    popup = () => {\n        this.refs.popupAlert.setAttribute('style','display: none');\n    }\n\n    render() {\n        return (\n            <div className=\"List\">\n                <div className=\"list-header\">To Do List</div>\n                <div className=\"list-form\">\n                    <div className=\"alert-message\" style={{display: 'none'}} ref=\"alertMessage\">\n                        <FaExclamationCircle /> Enter a task\n                    </div>\n                    <form className=\"add-form\" onSubmit={ this.add }>\n                        <input type=\"text\" \n                                placeholder=\"Add task to list\"\n                                onChange={ this.handleUserInput } \n                                value={ this.state.userInput } \n                                ref=\"taskInput\" />\n                        <button className=\"add\" onClick={ this.add }><FaPlus /></button>\n                    </form>\n                </div>\n                <div className=\"list-items\">\n                    { this.state.tasks.map(task => {\n                        return (\n                            <ListItem key={ task.id }\n                                        item={ task.id }\n                                        onChange={ this.update }\n                                        onRemove={ this.remove }>\n                                { task.task }\n                            </ListItem>\n                        )\n                    })}\n                </div>\n                <div className=\"popup-alert\" style={{display: 'none'}} ref=\"popupAlert\" >\n                    <FaExclamationCircle />\n                    <p>Task was not entered in text field</p>\n                    <button className=\"alert-btn\" onClick={ this.popup }>OK</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default List;","import React from 'react';\nimport '../stylesheets/BackgroundItem.css'\nimport { FaGlobeAmericas } from 'react-icons/fa';\n\nconst BackgroundItem = () => (\n  <div className=\"background-items\">\n      <div className=\"phone\">\n        <div className=\"phone-camera\"></div>\n        <div className=\"phone-screen\"></div>\n        <div className=\"phone-homebutton\"></div>\n      </div>\n      <div className=\"passport\">\n        <div className=\"passport-book\">\n          <div>PASSPORT</div>\n          <div className=\"passport-globe\"><FaGlobeAmericas /></div>\n        </div>\n        <div className=\"passport-ticket\">\n          <div className=\"passport-stripe\"></div>\n        </div>\n      </div>\n  </div>\n)\n\nexport default BackgroundItem;","import React from 'react';\nimport '../stylesheets/Desktop.css';\nimport List from './List';\nimport BackgroundItem from './BackgroundItem';\n\nconst Desktop = () => (\n  <div className=\"Desktop\">\n    <List />\n    <BackgroundItem />\n  </div>\n);\n\nexport default Desktop;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport Desktop from './components/Desktop';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Desktop />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}